#!/bin/sh
cd "${0%/*}" || exit                                # Run from this directory
. ${WM_PROJECT_DIR:?}/bin/tools/RunFunctions        # Tutorial run functions
#------------------------------------------------------------------------------

#User entry
parameterFile="$PWD/system/parameters"
#------------------------------------------------------------------------------

# Read number of cores from command line argument
export nCPU="$1"

case "$nCPU" in
  ([1-9][0-9]*)
  ;;
  (*)
    echo "Usage: Allrun <number of cores to use>"
    echo "Example: ./Allrun 16"
    exit
  ;;
esac

# Read refinement steps from base mesh from parameters file
nref=$(sed -ne 's/^ *nref  *\([0-9][0-9]*\).*$/\1/p' "$parameterFile"| tail -n1)
if [ "${nref:-0}" -lt 1 ]
then
    echo "Usage: Set valid nref - refinement level inside system/parameters"
    echo "Example: nref 2;"
    exit
else
    echo "Using refinement level : $nref"
fi


cp -f system/controlDict.st system/controlDict
cp -f system/fvSchemes.st system/fvSchemes
cp -f system/fvSolution.st system/fvSolution
foamDictionary -entry simulationType -set RAS constant/turbulenceProperties
foamDictionary -entry acousticDampingSource.active -set false system/fvOptions

runApplication blockMesh
runApplication surfaceFeatureExtract
runApplication decomposePar -decomposeParDict system/decomposeParDict_mesh

# Do refine according to nref
# - refineMesh strategy is used instead of blockMesh to full resolution
# - as we can generate mesh faster and in parallel with any steps of refineMesh
for ((iter=1; iter<"$nref"; iter++))
do
    refStep=$(echo "$iter+1"|bc -l)
    echo "Doing refinement step : baseline + $iter"
    runParallel -decomposeParDict system/decomposeParDict_mesh -o -s "r-$refStep"  refineMesh -all -overwrite
done

runParallel -decomposeParDict system/decomposeParDict_mesh snappyHexMesh -overwrite
runParallel -decomposeParDict system/decomposeParDict_mesh renumberMesh -constant -overwrite
runParallel -decomposeParDict system/decomposeParDict_mesh checkMesh -constant
runParallel -decomposeParDict system/decomposeParDict_solve redistributePar -constant -overwrite
restore0Dir -processor
runParallel -decomposeParDict system/decomposeParDict_solve potentialFoam -initialiseUBCs -noFunctionObjects
rm -rf processor*/0/phi.gz
runParallel -decomposeParDict system/decomposeParDict_solve applyBoundaryLayer  -ybl 0.1
runParallel -decomposeParDict system/decomposeParDict_solve rhoSimpleFoam

cp -f system/controlDict.tr system/controlDict
cp -f system/fvSchemes.tr system/fvSchemes
cp -f system/fvSolution.tr system/fvSolution
foamDictionary -entry simulationType -set LES constant/turbulenceProperties
foamDictionary -entry acousticDampingSource.active -set true system/fvOptions
./system/replace.sh

mv -f postProcessing postProcessing.steadyState
runParallel -decomposeParDict system/decomposeParDict_solve rhoPimpleFoam

#runParallel -decomposeParDict system/decomposeParDict_solve noise -dict system/noiseDict.surface

runApplication -s p1 noise -dict system/noiseDict.point-1
runApplication -s p2 noise -dict system/noiseDict.point-2
runApplication -s p3 noise -dict system/noiseDict.point-3
runApplication -s p4 noise -dict system/noiseDict.point-4
runApplication -s p5 noise -dict system/noiseDict.point-5

gnuplot plot_spectrum
