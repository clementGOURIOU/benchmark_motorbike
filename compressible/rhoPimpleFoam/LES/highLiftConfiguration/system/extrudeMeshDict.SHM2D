/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  v2012                                 |
|   \\  /    A nd           | Website:  www.openfoam.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      extrudeMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

#include        "${FOAM_CASE}/system/include/caseDefinition"

LspanExt        #eval{ $Lspan * $Lchord };

// What to extrude:
//      patch   : from patch of another case ('sourceCase')
//      mesh    : as above but with original case included
//      surface : from externally read surface
constructFrom   patch;

// If construct from patch/mesh:
sourceCase      "./";
sourcePatches   (ff_zMax);

// If construct from patch: patch to use for back (can be same as sourcePatch)
exposedPatchName ff_zMin;

// Flip surface normals before usage. Valid only for extrude from surface or
// patch.
flipNormals     true;

//- Linear extrusion in point-normal direction
extrudeModel    linearNormal;

nLayers         1;
expansionRatio  1;

linearNormalCoeffs
{
    thickness       $LspanExt;
}

linearDirectionCoeffs
{
    direction       (0 0 -1);
    thickness       $LspanExt;
}

// Do front and back need to be merged? Usually only makes sense for 360
// degree wedges.
mergeFaces false;

// Merge small edges. Fraction of bounding box.
mergeTol 0;

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //
