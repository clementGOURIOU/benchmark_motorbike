/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  v2206                                 |
|   \\  /    A nd           | Website:  www.openfoam.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      snappyHexMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

// Which of the steps to run
castellatedMesh true;
snap            true;
addLayers       true;

// Geometry. Definition of all surfaces. All surfaces are of class
// searchableSurface.
// Surfaces are used
// - to specify refinement for any mesh cell intersecting it
// - to specify refinement for any mesh cell inside/outside/near
// - to 'snap' the mesh boundary to the surface
geometry
{
    innerSphere.obj
    {
        type        triSurfaceMesh;
        name        innerSphere;
    }
    innerCylinderSmall.obj
    {
        type        triSurfaceMesh;
        name        innerCylinderSmall;
        regions
        {
            innerCylinderSmall_1
            {
                 name       innerCylinderSmall_1;
            }
            innerCylinderSmall_2
            {
                 name       innerCylinderSmall_2;
            }
        }
    }
    outerSphere.obj
    {
        type        triSurfaceMesh;
        name        outerSphere;
        regions
        {
            freestream
            {
                 name       freestream;
            }
        }
    }
    propellerTip.obj
    {
        type        triSurfaceMesh;
        name        propellerTip;
        regions
        {
            ascii
            {
                 name       propellerTip;
            }
        }
    }
    propellerStem1.obj
    {
        type        triSurfaceMesh;
        name        propellerStem1;
        regions
        {
            ascii
            {
                 name       propellerStem1;
            }
        }
    }
    propellerStem2.obj
    {
        type        triSurfaceMesh;
        name        propellerStem2;
        regions
        {
            propellerStem2
            {
                 name       propellerStem2;
            }
            propellerStem_outlet
            {
                 name       propellerStem_outlet;
            }
        }
    }
};

// Settings for the castellatedMesh generation.
castellatedMeshControls
{

    maxLocalCells 200000000;

    maxGlobalCells 300000000;

    minRefinementCells 0;

    maxLoadUnbalance 0.10;

    nCellsBetweenLevels 4;

    // Explicit feature edge refinement
    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    // Specifies a level for any cell intersected by its edges.
    // This is a featureEdgeMesh, read from constant/triSurface for now.
    features
    (
        {
            file        "innerCylinderSmall.eMesh";
            level       0;
        }
        {
            file        "outerSphere.eMesh";
            level       0;
        }
        {
            file        "propellerTip.eMesh";
            level       0;
        }
        {
            file        "propellerStem1.eMesh";
            level       0;
        }
        {
            file        "propellerStem2.eMesh";
            level       0;
        }
/*
        {
            file        "propellerStem3.eMesh";
            level       0;
        }
*/
    );

    // Surface based refinement
    // ~~~~~~~~~~~~~~~~~~~~~~~~

    // Specifies two levels for every surface. The first is the minimum level,
    // every cell intersecting a surface gets refined up to the minimum level.
    // The second level is the maximum level. Cells that 'see' multiple
    // intersections where the intersections make an
    // angle > resolveFeatureAngle get refined up to the maximum level.

    refinementSurfaces
    {
        innerCylinderSmall
        {
            level       (3 3);
        }
        outerSphere
        {
            level       (1 1);
        }
        propellerTip
        {
            level       (4 5);
        }
        propellerStem1
        {
            level       (4 4);
        }
        propellerStem2
        {
            level       (4 4);
        }
/*
        propellerStem3
        {
            level       (4 4);
        }
*/
    }

    // Resolve sharp angles
    resolveFeatureAngle 30;

    // Region-wise refinement
    // ~~~~~~~~~~~~~~~~~~~~~~

    // Specifies refinement level for cells in relation to a surface. One of
    // three modes
    // - distance. 'levels' specifies per distance to the surface the
    //   wanted refinement level. The distances need to be specified in
    //   descending order.
    // - inside. 'levels' is only one entry and only the level is used. All
    //   cells inside the surface get refined up to the level. The surface
    //   needs to be closed for this to be possible.
    // - outside. Same but cells outside.

    refinementRegions
    {
        innerSphere
        {
            mode        inside;
            levels      ((1E15 2));
        }
        innerCylinderSmall
        {
            mode        inside;
            levels      ((1E15 3));
        }
	outerSphere
        {
            mode        inside;
            levels      ((1E15 2));
        }

    }

    // Mesh selection
    // ~~~~~~~~~~~~~~

    // After refinement patches get added for all refinementSurfaces and
    // all cells intersecting the surfaces get put into these patches. The
    // section reachable from the locationInMesh is kept.
    // NOTE: This point should never be on a face, always inside a cell, even
    // after refinement.
    locationInMesh (0.0 -0.15 0.0);

    // Whether any faceZones (as specified in the refinementSurfaces)
    // are only on the boundary of corresponding cellZones or also allow
    // free-standing zone faces. Not used if there are no faceZones.
    allowFreeStandingZoneFaces false;
}

// Settings for the snapping.
snapControls
{
    tolerance       1.0;
    implicitFeatureSnap false;
    explicitFeatureSnap true;
    multiRegionFeatureSnap true;
    detectNearSurfacesSnap true;
    nSmoothPatch    3;
    nSolveIter      30;
    nRelaxIter      5;
    nFeatureSnapIter 10;
    nSmoothInternal     $nSmoothPatch;

}

// Settings for the layer addition.
addLayersControls
{
    // Per final patch (so not geometry!) the layer information
    layers
    {
	   propellerTip			{nSurfaceLayers 5;      firstLayerThickness 0.0001;     expansionRatio 1.20; }
	   propellerStem1		{nSurfaceLayers 5;      firstLayerThickness 0.0002;     expansionRatio 1.20; }
	   propellerStem2		{nSurfaceLayers 5;      firstLayerThickness 0.0002;     expansionRatio 1.20; }
	   propellerStem_outlet		{nSurfaceLayers 5;      firstLayerThickness 0.0002;     expansionRatio 1.20; }
//	   propellerStem3		{nSurfaceLayers 5;      firstLayerThickness 0.0002;     expansionRatio 1.20; }

    }

    relativeSizes       false;
    expansionRatio 1.2;
    firstLayerThickness 0.00012;
    minThickness 0.000001;
    nGrow 0;
    featureAngle 175;
    slipFeatureAngle 30;
    nMedialAxisIter 10;
    nRelaxIter 5;
    nSmoothSurfaceNormals 10;
    nSmoothNormals 10;
    nSmoothDisplacement 90;
    nSmoothThickness 10;
    maxFaceThicknessRatio 0.5;
    maxThicknessToMedialRatio 0.3;
    minMedialAxisAngle 90;
    nBufferCellsNoExtrude 0;
    nLayerIter 50;
    nRelaxedIter 0;

}

// Generic mesh quality settings. At any undoable phase these determine
// where to undo.
meshQualityControls
{
    maxNonOrtho 65;
    maxBoundarySkewness 20;
    maxInternalSkewness 4;
    maxConcave 80;
    minFlatness 0.5;
    minVol 1e-30;
    minTetQuality 1e-30;
    minArea 1e-30;
    minTwist 0.02;
    minDeterminant 0.001;
    minFaceWeight 0.05;
    minVolRatio 0.01;
    minTriangleTwist 0.001;
    nSmoothScale 4;
    errorReduction 0.75;
    relaxed
    {
        maxNonOrtho 75;
        maxInternalSkewness 8;
//        minTetQuality -1e30;
        minTwist 1.0e-06;
        minDeterminant 1.0e-06;
        minFaceWeight 1.0e-06;
    }

}

// Merge tolerance. Is fraction of overall bounding box of initial mesh.
// Note: the write tolerance needs to be higher than this.
mergeTolerance 1e-6;

// ************************************************************************* //
