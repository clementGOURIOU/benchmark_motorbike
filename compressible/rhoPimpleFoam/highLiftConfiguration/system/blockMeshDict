/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  v2012                                 |
|   \\  /    A nd           | Website:  www.openfoam.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      blockMeshDict;
}

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

#include        "${FOAM_CASE}/system/include/caseDefinition"

// calculate blockMesh vertices coordinates
Nxby2 #calc "static_cast<int>($dimblockMesh / $res0)";
Nx    #calc "static_cast<int>(2*$Nxby2)";
xMin  #calc "($Xc * $Lchord) - ($Nxby2 * $res0 * $Lchord)";
xMax  #calc "($Xc * $Lchord) + ($Nxby2 * $res0 * $Lchord)";
yMin  #calc "($Yc * $Lchord) - ($Nxby2 * $res0 * $Lchord)";
yMax  #calc "($Yc * $Lchord) + ($Nxby2 * $res0 * $Lchord)";
zMin  #calc "($Zc * $Lchord) - ($res0 * $Lchord)";
zMax  #calc "($Zc * $Lchord)";
    
vertices
(
    ($xMin $yMin $zMin)           // index 0
    ($xMax $yMin $zMin)           // index 1
    ($xMax $yMax $zMin)           // index 2
    ($xMin $yMax $zMin)           // index 3
    ($xMin $yMin $zMax)           // index 4
    ($xMax $yMin $zMax)           // index 5
    ($xMax $yMax $zMax)           // index 6
    ($xMin $yMax $zMax)           // index 7
);

blocks
(
    hex (0 1 2 3 4 5 6 7) ($Nx $Nx 1) simpleGrading (1 1 1)
);

edges
(
);

boundary
(
    ff_xMin
    {
        type patch;
        faces
        (
            (0 4 7 3)
        );
    }
    ff_xMax
    {
        type patch;
        faces
        (
            (2 6 5 1)
        );
    }
    ff_yMin
    {
        type patch;
        faces
        (
            (1 5 4 0)
        );
    }
    ff_yMax
    {
        type patch;
        faces
        (
            (3 7 6 2)
        );
    }
    ff_zMin
    {
        type symmetry;
        faces
        (
            (0 3 2 1)
        );
    }
    ff_zMax
    {
        type symmetry;
        faces
        (
            (4 5 6 7)
        );
    }
);

// ************************************************************************* //
